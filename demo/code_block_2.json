// File: config.json
   {
       "baseUrl": "http://example.com",
       "browser": "chrome",
       "implicitWait": 10
   }
   ```

2. **testdata.json**
   ```json
   // File: testdata.json
   {
       "users": [
           {"username": "user123", "password": "Secure@5"},
           {"username": "user456", "password": "Password#8"},
           {"username": "admin789", "password": "Pass*123"},
           {"username": "healthcare123", "password": "Health@1"}
       ],
       "reports": [
           {"type": "Standard", "date": "2023-10-15"},
           {"type": "Custom", "startDate": "2023-01-01", "endDate": "2023-12-31", "includeGraphs": true},
           {"type": "Compliance", "department": "Pediatrics"},
           {"type": "Inventory", "includeStockLevels": true}
       ]
   }
   ```

### Step 3: Utility Classes

1. **DriverManager.java**
   ```java
   // File: DriverManager.java
   package utils;

   import org.openqa.selenium.WebDriver;
   import org.openqa.selenium.chrome.ChromeDriver;
   import org.openqa.selenium.firefox.FirefoxDriver;
   import org.openqa.selenium.edge.EdgeDriver;

   public class DriverManager {
       public static WebDriver getDriver(String browser) {
           switch (browser.toLowerCase()) {
               case "chrome":
                   System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
                   return new ChromeDriver();
               case "firefox":
                   System.setProperty("webdriver.gecko.driver", "path/to/geckodriver");
                   return new FirefoxDriver();
               case "edge":
                   System.setProperty("webdriver.edge.driver", "path/to/edgedriver");
                   return new EdgeDriver();
               default:
                   throw new IllegalArgumentException("Browser not supported");
           }
       }
   }
   ```

2. **ConfigReader.java**
   ```java
   // File: ConfigReader.java
   package utils;

   import java.io.FileReader;
   import org.json.simple.JSONObject;
   import org.json.simple.parser.JSONParser;

   public class ConfigReader {
       public static JSONObject getConfigData() {
           try (FileReader reader = new FileReader("config/config.json")) {
               JSONParser jsonParser = new JSONParser();
               return (JSONObject) jsonParser.parse(reader);
           } catch (Exception e) {
               e.printStackTrace();
               return null;
           }
       }
   }
   ```

3. **TestDataReader.java**
   ```java
   // File: TestDataReader.java
   package utils;

   import java.io.FileReader;
   import org.json.simple.JSONArray;
   import org.json.simple.JSONObject;
   import org.json.simple.parser.JSONParser;

   public class TestDataReader {
       public static JSONObject getTestData() {
           try (FileReader reader = new FileReader("config/testdata.json")) {
               JSONParser jsonParser = new JSONParser();
               return (JSONObject) jsonParser.parse(reader);
           } catch (Exception e) {
               e.printStackTrace();
               return null;
           }
       }
   }
   ```

### Step 4: Page Object Classes

1. **LoginPage.java**
   ```java
   // File: LoginPage.java
   package pages;

   import org.openqa.selenium.By;
   import org.openqa.selenium.WebDriver;
   import org.openqa.selenium.support.ui.ExpectedConditions;
   import org.openqa.selenium.support.ui.WebDriverWait;

   public class LoginPage {
       private WebDriver driver;
       private By usernameField = By.id("username");
       private By passwordField = By.id("password");
       private By loginButton = By.id("loginButton");

       public LoginPage(WebDriver driver) {
           this.driver = driver;
       }

       public void login(String username, String password) {
           driver.findElement(usernameField).sendKeys(username);
           driver.findElement(passwordField).sendKeys(password);
           driver.findElement(loginButton).click();
           new WebDriverWait(driver, 10)
               .until(ExpectedConditions.visibilityOfElementLocated(By.id("dashboard")));
       }
   }
   ```

2. **ReportGenerationPage.java**
   ```java
   // File: ReportGenerationPage.java
   package pages;

   import org.openqa.selenium.By;
   import org.openqa.selenium.WebDriver;
   import org.openqa.selenium.support.ui.ExpectedConditions;
   import org.openqa.selenium.support.ui.WebDriverWait;

   public class ReportGenerationPage {
       private WebDriver driver;
       private By reportTypeDropdown = By.id("reportType");
       private By dateField = By.id("reportDate");
       private By generateButton = By.id("generateReport");

       public ReportGenerationPage(WebDriver driver) {
           this.driver = driver;
       }

       public void selectReportType(String reportType) {
           driver.findElement(reportTypeDropdown).sendKeys(reportType);
       }

       public void enterReportParameters(String date) {
           driver.findElement(dateField).sendKeys(date);
       }

       public void generateReport() {
           driver.findElement(generateButton).click();
           new WebDriverWait(driver, 10)
               .until(ExpectedConditions.visibilityOfElementLocated(By.id("reportResult")));
       }
   }
   ```

### Step 5: Test Class

1. **ReportTest.java**
   ```java
   // File: ReportTest.java
   package tests;

   import org.openqa.selenium.WebDriver;
   import org.testng.annotations.AfterClass;
   import org.testng.annotations.BeforeClass;
   import org.testng.annotations.Test;
   import pages.LoginPage;
   import pages.ReportGenerationPage;
   import utils.ConfigReader;
   import utils.DriverManager;
   import utils.TestDataReader;
   import org.json.simple.JSONObject;

   public class ReportTest {
       private WebDriver driver;
       private JSONObject config;
       private JSONObject testData;

       @BeforeClass
       public void setUp() {
           config = ConfigReader.getConfigData();
           testData = TestDataReader.getTestData();
           driver = DriverManager.getDriver((String) config.get("browser"));
           driver.get((String) config.get("baseUrl"));
       }

       @Test
       public void testStandardReportGeneration() {
           JSONObject user = (JSONObject) ((JSONArray) testData.get("users")).get(0);
           JSONObject reportData = (JSONObject) ((JSONArray) testData.get("reports")).get(0);

           LoginPage loginPage = new LoginPage(driver);
           loginPage.login((String) user.get("username"), (String) user.get("password"));

           ReportGenerationPage reportPage = new ReportGenerationPage(driver);
           reportPage.selectReportType((String) reportData.get("type"));
           reportPage.enterReportParameters((String) reportData.get("date"));
           reportPage.generateReport();

           // Add assertions to verify the report accuracy
       }

       @AfterClass
       public void tearDown() {
           if (driver != null) {
               driver.quit();
           }
       }
   }
   ```

### Step 6: Running Instructions

Create a `runInstructions.txt` file with the following content: